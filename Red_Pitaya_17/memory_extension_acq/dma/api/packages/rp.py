# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rp_py
else:
    import _rp_py

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class arbBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _rp_py.arbBuffer_swiginit(self, _rp_py.new_arbBuffer(nelements))
    __swig_destroy__ = _rp_py.delete_arbBuffer

    def __getitem__(self, index):
        return _rp_py.arbBuffer___getitem__(self, index)

    def __setitem__(self, index, value):
        return _rp_py.arbBuffer___setitem__(self, index, value)

    def cast(self):
        return _rp_py.arbBuffer_cast(self)

    @staticmethod
    def frompointer(t):
        return _rp_py.arbBuffer_frompointer(t)

# Register arbBuffer in _rp_py:
_rp_py.arbBuffer_swigregister(arbBuffer)

def arbBuffer_frompointer(t):
    return _rp_py.arbBuffer_frompointer(t)

class i16Buffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _rp_py.i16Buffer_swiginit(self, _rp_py.new_i16Buffer(nelements))
    __swig_destroy__ = _rp_py.delete_i16Buffer

    def __getitem__(self, index):
        return _rp_py.i16Buffer___getitem__(self, index)

    def __setitem__(self, index, value):
        return _rp_py.i16Buffer___setitem__(self, index, value)

    def cast(self):
        return _rp_py.i16Buffer_cast(self)

    @staticmethod
    def frompointer(t):
        return _rp_py.i16Buffer_frompointer(t)

# Register i16Buffer in _rp_py:
_rp_py.i16Buffer_swigregister(i16Buffer)

def i16Buffer_frompointer(t):
    return _rp_py.i16Buffer_frompointer(t)

class fBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _rp_py.fBuffer_swiginit(self, _rp_py.new_fBuffer(nelements))
    __swig_destroy__ = _rp_py.delete_fBuffer

    def __getitem__(self, index):
        return _rp_py.fBuffer___getitem__(self, index)

    def __setitem__(self, index, value):
        return _rp_py.fBuffer___setitem__(self, index, value)

    def cast(self):
        return _rp_py.fBuffer_cast(self)

    @staticmethod
    def frompointer(t):
        return _rp_py.fBuffer_frompointer(t)

# Register fBuffer in _rp_py:
_rp_py.fBuffer_swigregister(fBuffer)

def fBuffer_frompointer(t):
    return _rp_py.fBuffer_frompointer(t)

class dBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _rp_py.dBuffer_swiginit(self, _rp_py.new_dBuffer(nelements))
    __swig_destroy__ = _rp_py.delete_dBuffer

    def __getitem__(self, index):
        return _rp_py.dBuffer___getitem__(self, index)

    def __setitem__(self, index, value):
        return _rp_py.dBuffer___setitem__(self, index, value)

    def cast(self):
        return _rp_py.dBuffer_cast(self)

    @staticmethod
    def frompointer(t):
        return _rp_py.dBuffer_frompointer(t)

# Register dBuffer in _rp_py:
_rp_py.dBuffer_swigregister(dBuffer)

def dBuffer_frompointer(t):
    return _rp_py.dBuffer_frompointer(t)


def new_pi16Arr(nelements):
    return _rp_py.new_pi16Arr(nelements)

def delete_pi16Arr(ary):
    return _rp_py.delete_pi16Arr(ary)

def pi16Arr_getitem(ary, index):
    return _rp_py.pi16Arr_getitem(ary, index)

def pi16Arr_setitem(ary, index, value):
    return _rp_py.pi16Arr_setitem(ary, index, value)

def new_pfArr(nelements):
    return _rp_py.new_pfArr(nelements)

def delete_pfArr(ary):
    return _rp_py.delete_pfArr(ary)

def pfArr_getitem(ary, index):
    return _rp_py.pfArr_getitem(ary, index)

def pfArr_setitem(ary, index):
    return _rp_py.pfArr_setitem(ary, index)

def new_pdArr(nelements):
    return _rp_py.new_pdArr(nelements)

def delete_pdArr(ary):
    return _rp_py.delete_pdArr(ary)

def pdArr_getitem(ary, index):
    return _rp_py.pdArr_getitem(ary, index)

def pdArr_setitem(ary, index):
    return _rp_py.pdArr_setitem(ary, index)

def new_p_buffers_t():
    return _rp_py.new_p_buffers_t()

def copy_p_buffers_t(value):
    return _rp_py.copy_p_buffers_t(value)

def delete_p_buffers_t(obj):
    return _rp_py.delete_p_buffers_t(obj)

def p_buffers_t_assign(obj, value):
    return _rp_py.p_buffers_t_assign(obj, value)

def p_buffers_t_value(obj):
    return _rp_py.p_buffers_t_value(obj)
RP_LED0 = _rp_py.RP_LED0
RP_LED1 = _rp_py.RP_LED1
RP_LED2 = _rp_py.RP_LED2
RP_LED3 = _rp_py.RP_LED3
RP_LED4 = _rp_py.RP_LED4
RP_LED5 = _rp_py.RP_LED5
RP_LED6 = _rp_py.RP_LED6
RP_LED7 = _rp_py.RP_LED7
RP_DIO0_P = _rp_py.RP_DIO0_P
RP_DIO1_P = _rp_py.RP_DIO1_P
RP_DIO2_P = _rp_py.RP_DIO2_P
RP_DIO3_P = _rp_py.RP_DIO3_P
RP_DIO4_P = _rp_py.RP_DIO4_P
RP_DIO5_P = _rp_py.RP_DIO5_P
RP_DIO6_P = _rp_py.RP_DIO6_P
RP_DIO7_P = _rp_py.RP_DIO7_P
RP_DIO0_N = _rp_py.RP_DIO0_N
RP_DIO1_N = _rp_py.RP_DIO1_N
RP_DIO2_N = _rp_py.RP_DIO2_N
RP_DIO3_N = _rp_py.RP_DIO3_N
RP_DIO4_N = _rp_py.RP_DIO4_N
RP_DIO5_N = _rp_py.RP_DIO5_N
RP_DIO6_N = _rp_py.RP_DIO6_N
RP_DIO7_N = _rp_py.RP_DIO7_N
RP_LOW = _rp_py.RP_LOW
RP_HIGH = _rp_py.RP_HIGH
OUT_TR_ADC = _rp_py.OUT_TR_ADC
OUT_TR_DAC = _rp_py.OUT_TR_DAC
RP_IN = _rp_py.RP_IN
RP_OUT = _rp_py.RP_OUT
RP_AOUT0 = _rp_py.RP_AOUT0
RP_AOUT1 = _rp_py.RP_AOUT1
RP_AOUT2 = _rp_py.RP_AOUT2
RP_AOUT3 = _rp_py.RP_AOUT3
RP_AIN0 = _rp_py.RP_AIN0
RP_AIN1 = _rp_py.RP_AIN1
RP_AIN2 = _rp_py.RP_AIN2
RP_AIN3 = _rp_py.RP_AIN3
RP_WAVEFORM_SINE = _rp_py.RP_WAVEFORM_SINE
RP_WAVEFORM_SQUARE = _rp_py.RP_WAVEFORM_SQUARE
RP_WAVEFORM_TRIANGLE = _rp_py.RP_WAVEFORM_TRIANGLE
RP_WAVEFORM_RAMP_UP = _rp_py.RP_WAVEFORM_RAMP_UP
RP_WAVEFORM_RAMP_DOWN = _rp_py.RP_WAVEFORM_RAMP_DOWN
RP_WAVEFORM_DC = _rp_py.RP_WAVEFORM_DC
RP_WAVEFORM_PWM = _rp_py.RP_WAVEFORM_PWM
RP_WAVEFORM_ARBITRARY = _rp_py.RP_WAVEFORM_ARBITRARY
RP_WAVEFORM_DC_NEG = _rp_py.RP_WAVEFORM_DC_NEG
RP_WAVEFORM_SWEEP = _rp_py.RP_WAVEFORM_SWEEP
RP_GEN_MODE_CONTINUOUS = _rp_py.RP_GEN_MODE_CONTINUOUS
RP_GEN_MODE_BURST = _rp_py.RP_GEN_MODE_BURST
RP_GEN_MODE_STREAM = _rp_py.RP_GEN_MODE_STREAM
RP_GEN_SWEEP_DIR_NORMAL = _rp_py.RP_GEN_SWEEP_DIR_NORMAL
RP_GEN_SWEEP_DIR_UP_DOWN = _rp_py.RP_GEN_SWEEP_DIR_UP_DOWN
RP_GEN_SWEEP_MODE_LINEAR = _rp_py.RP_GEN_SWEEP_MODE_LINEAR
RP_GEN_SWEEP_MODE_LOG = _rp_py.RP_GEN_SWEEP_MODE_LOG
RP_GEN_TRIG_SRC_INTERNAL = _rp_py.RP_GEN_TRIG_SRC_INTERNAL
RP_GEN_TRIG_SRC_EXT_PE = _rp_py.RP_GEN_TRIG_SRC_EXT_PE
RP_GEN_TRIG_SRC_EXT_NE = _rp_py.RP_GEN_TRIG_SRC_EXT_NE
RP_GAIN_1X = _rp_py.RP_GAIN_1X
RP_GAIN_5X = _rp_py.RP_GAIN_5X
RP_CH_1 = _rp_py.RP_CH_1
RP_CH_2 = _rp_py.RP_CH_2
RP_CH_3 = _rp_py.RP_CH_3
RP_CH_4 = _rp_py.RP_CH_4
RP_T_CH_1 = _rp_py.RP_T_CH_1
RP_T_CH_2 = _rp_py.RP_T_CH_2
RP_T_CH_3 = _rp_py.RP_T_CH_3
RP_T_CH_4 = _rp_py.RP_T_CH_4
RP_T_CH_EXT = _rp_py.RP_T_CH_EXT
AA = _rp_py.AA
BB = _rp_py.BB
PP = _rp_py.PP
KK = _rp_py.KK
class buffers_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = property(_rp_py.buffers_t_channels_get, _rp_py.buffers_t_channels_set)
    size = property(_rp_py.buffers_t_size_get, _rp_py.buffers_t_size_set)
    use_calib_for_raw = property(_rp_py.buffers_t_use_calib_for_raw_get, _rp_py.buffers_t_use_calib_for_raw_set)
    use_calib_for_volts = property(_rp_py.buffers_t_use_calib_for_volts_get, _rp_py.buffers_t_use_calib_for_volts_set)
    ch_i = property(_rp_py.buffers_t_ch_i_get, _rp_py.buffers_t_ch_i_set)
    ch_d = property(_rp_py.buffers_t_ch_d_get, _rp_py.buffers_t_ch_d_set)
    ch_f = property(_rp_py.buffers_t_ch_f_get, _rp_py.buffers_t_ch_f_set)

    def __init__(self):
        _rp_py.buffers_t_swiginit(self, _rp_py.new_buffers_t())
    __swig_destroy__ = _rp_py.delete_buffers_t

# Register buffers_t in _rp_py:
_rp_py.buffers_t_swigregister(buffers_t)

RP_DEC_1 = _rp_py.RP_DEC_1
RP_DEC_2 = _rp_py.RP_DEC_2
RP_DEC_4 = _rp_py.RP_DEC_4
RP_DEC_8 = _rp_py.RP_DEC_8
RP_DEC_16 = _rp_py.RP_DEC_16
RP_DEC_32 = _rp_py.RP_DEC_32
RP_DEC_64 = _rp_py.RP_DEC_64
RP_DEC_128 = _rp_py.RP_DEC_128
RP_DEC_256 = _rp_py.RP_DEC_256
RP_DEC_512 = _rp_py.RP_DEC_512
RP_DEC_1024 = _rp_py.RP_DEC_1024
RP_DEC_2048 = _rp_py.RP_DEC_2048
RP_DEC_4096 = _rp_py.RP_DEC_4096
RP_DEC_8192 = _rp_py.RP_DEC_8192
RP_DEC_16384 = _rp_py.RP_DEC_16384
RP_DEC_32768 = _rp_py.RP_DEC_32768
RP_DEC_65536 = _rp_py.RP_DEC_65536
RP_DC = _rp_py.RP_DC
RP_AC = _rp_py.RP_AC
RP_TRIG_SRC_DISABLED = _rp_py.RP_TRIG_SRC_DISABLED
RP_TRIG_SRC_NOW = _rp_py.RP_TRIG_SRC_NOW
RP_TRIG_SRC_CHA_PE = _rp_py.RP_TRIG_SRC_CHA_PE
RP_TRIG_SRC_CHA_NE = _rp_py.RP_TRIG_SRC_CHA_NE
RP_TRIG_SRC_CHB_PE = _rp_py.RP_TRIG_SRC_CHB_PE
RP_TRIG_SRC_CHB_NE = _rp_py.RP_TRIG_SRC_CHB_NE
RP_TRIG_SRC_EXT_PE = _rp_py.RP_TRIG_SRC_EXT_PE
RP_TRIG_SRC_EXT_NE = _rp_py.RP_TRIG_SRC_EXT_NE
RP_TRIG_SRC_AWG_PE = _rp_py.RP_TRIG_SRC_AWG_PE
RP_TRIG_SRC_AWG_NE = _rp_py.RP_TRIG_SRC_AWG_NE
RP_TRIG_SRC_CHC_PE = _rp_py.RP_TRIG_SRC_CHC_PE
RP_TRIG_SRC_CHC_NE = _rp_py.RP_TRIG_SRC_CHC_NE
RP_TRIG_SRC_CHD_PE = _rp_py.RP_TRIG_SRC_CHD_PE
RP_TRIG_SRC_CHD_NE = _rp_py.RP_TRIG_SRC_CHD_NE
RP_TRIG_STATE_TRIGGERED = _rp_py.RP_TRIG_STATE_TRIGGERED
RP_TRIG_STATE_WAITING = _rp_py.RP_TRIG_STATE_WAITING
ADC_BUFFER_SIZE = _rp_py.ADC_BUFFER_SIZE
DAC_BUFFER_SIZE = _rp_py.DAC_BUFFER_SIZE
RISE_FALL_MIN_RATIO = _rp_py.RISE_FALL_MIN_RATIO
RISE_FALL_MAX_RATIO = _rp_py.RISE_FALL_MAX_RATIO
RP_OK = _rp_py.RP_OK
RP_EOED = _rp_py.RP_EOED
RP_EOMD = _rp_py.RP_EOMD
RP_ECMD = _rp_py.RP_ECMD
RP_EMMD = _rp_py.RP_EMMD
RP_EUMD = _rp_py.RP_EUMD
RP_EOOR = _rp_py.RP_EOOR
RP_ELID = _rp_py.RP_ELID
RP_EMRO = _rp_py.RP_EMRO
RP_EWIP = _rp_py.RP_EWIP
RP_EPN = _rp_py.RP_EPN
RP_UIA = _rp_py.RP_UIA
RP_FCA = _rp_py.RP_FCA
RP_RCA = _rp_py.RP_RCA
RP_BTS = _rp_py.RP_BTS
RP_EIPV = _rp_py.RP_EIPV
RP_EUF = _rp_py.RP_EUF
RP_ENN = _rp_py.RP_ENN
RP_EFOB = _rp_py.RP_EFOB
RP_EFCB = _rp_py.RP_EFCB
RP_EABA = _rp_py.RP_EABA
RP_EFRB = _rp_py.RP_EFRB
RP_EFWB = _rp_py.RP_EFWB
RP_EMNC = _rp_py.RP_EMNC
RP_NOTS = _rp_py.RP_NOTS
SPECTR_OUT_SIG_LEN = _rp_py.SPECTR_OUT_SIG_LEN

def rp_Init():
    return _rp_py.rp_Init()

def rp_InitReset(reset):
    return _rp_py.rp_InitReset(reset)

def rp_IsApiInit():
    return _rp_py.rp_IsApiInit()

def rp_Release():
    return _rp_py.rp_Release()

def rp_Reset():
    return _rp_py.rp_Reset()

def rp_GetVersion():
    return _rp_py.rp_GetVersion()

def rp_GetError(errorCode):
    return _rp_py.rp_GetError(errorCode)

def rp_EnableDigitalLoop(enable):
    return _rp_py.rp_EnableDigitalLoop(enable)

def rp_IdGetID():
    return _rp_py.rp_IdGetID()

def rp_IdGetDNA():
    return _rp_py.rp_IdGetDNA()

def rp_LEDSetState(state):
    return _rp_py.rp_LEDSetState(state)

def rp_LEDGetState():
    return _rp_py.rp_LEDGetState()

def rp_GPIOnSetDirection(direction):
    return _rp_py.rp_GPIOnSetDirection(direction)

def rp_GPIOnGetDirection():
    return _rp_py.rp_GPIOnGetDirection()

def rp_GPIOnSetState(state):
    return _rp_py.rp_GPIOnSetState(state)

def rp_GPIOnGetState():
    return _rp_py.rp_GPIOnGetState()

def rp_GPIOpSetDirection(direction):
    return _rp_py.rp_GPIOpSetDirection(direction)

def rp_GPIOpGetDirection():
    return _rp_py.rp_GPIOpGetDirection()

def rp_GPIOpSetState(state):
    return _rp_py.rp_GPIOpSetState(state)

def rp_GPIOpGetState():
    return _rp_py.rp_GPIOpGetState()

def rp_EnableDebugReg():
    return _rp_py.rp_EnableDebugReg()

def rp_SetCANModeEnable(enable):
    return _rp_py.rp_SetCANModeEnable(enable)

def rp_GetCANModeEnable():
    return _rp_py.rp_GetCANModeEnable()

def rp_DpinReset():
    return _rp_py.rp_DpinReset()

def rp_DpinSetState(pin, state):
    return _rp_py.rp_DpinSetState(pin, state)

def rp_DpinGetState(pin):
    return _rp_py.rp_DpinGetState(pin)

def rp_DpinSetDirection(pin, direction):
    return _rp_py.rp_DpinSetDirection(pin, direction)

def rp_DpinGetDirection(pin):
    return _rp_py.rp_DpinGetDirection(pin)

def rp_SetEnableDaisyChainTrigSync(enable):
    return _rp_py.rp_SetEnableDaisyChainTrigSync(enable)

def rp_GetEnableDaisyChainTrigSync():
    return _rp_py.rp_GetEnableDaisyChainTrigSync()

def rp_SetDpinEnableTrigOutput(enable):
    return _rp_py.rp_SetDpinEnableTrigOutput(enable)

def rp_GetDpinEnableTrigOutput():
    return _rp_py.rp_GetDpinEnableTrigOutput()

def rp_SetSourceTrigOutput(mode):
    return _rp_py.rp_SetSourceTrigOutput(mode)

def rp_GetSourceTrigOutput():
    return _rp_py.rp_GetSourceTrigOutput()

def rp_SetEnableDiasyChainClockSync(enable):
    return _rp_py.rp_SetEnableDiasyChainClockSync(enable)

def rp_GetEnableDiasyChainClockSync():
    return _rp_py.rp_GetEnableDiasyChainClockSync()

def rp_ApinReset():
    return _rp_py.rp_ApinReset()

def rp_ApinGetValue(pin):
    return _rp_py.rp_ApinGetValue(pin)

def rp_ApinGetValueRaw(pin):
    return _rp_py.rp_ApinGetValueRaw(pin)

def rp_ApinSetValue(pin, value):
    return _rp_py.rp_ApinSetValue(pin, value)

def rp_ApinSetValueRaw(pin, value):
    return _rp_py.rp_ApinSetValueRaw(pin, value)

def rp_ApinGetRange(pin):
    return _rp_py.rp_ApinGetRange(pin)

def rp_AIpinGetValue(pin):
    return _rp_py.rp_AIpinGetValue(pin)

def rp_AIpinGetValueRaw(pin):
    return _rp_py.rp_AIpinGetValueRaw(pin)

def rp_AOpinReset():
    return _rp_py.rp_AOpinReset()

def rp_AOpinGetValue(pin):
    return _rp_py.rp_AOpinGetValue(pin)

def rp_AOpinGetValueRaw(pin):
    return _rp_py.rp_AOpinGetValueRaw(pin)

def rp_AOpinSetValue(pin, value):
    return _rp_py.rp_AOpinSetValue(pin, value)

def rp_AOpinSetValueRaw(pin, value):
    return _rp_py.rp_AOpinSetValueRaw(pin, value)

def rp_AOpinGetRange(pin):
    return _rp_py.rp_AOpinGetRange(pin)

def rp_GetPllControlEnable():
    return _rp_py.rp_GetPllControlEnable()

def rp_SetPllControlEnable(enable):
    return _rp_py.rp_SetPllControlEnable(enable)

def rp_GetPllControlLocked():
    return _rp_py.rp_GetPllControlLocked()

def rp_GenReset():
    return _rp_py.rp_GenReset()

def rp_GenOutEnable(channel):
    return _rp_py.rp_GenOutEnable(channel)

def rp_GenOutEnableSync(enable):
    return _rp_py.rp_GenOutEnableSync(enable)

def rp_GenOutDisable(channel):
    return _rp_py.rp_GenOutDisable(channel)

def rp_GenOutIsEnabled(channel):
    return _rp_py.rp_GenOutIsEnabled(channel)

def rp_GenAmp(channel, amplitude):
    return _rp_py.rp_GenAmp(channel, amplitude)

def rp_GenGetAmp(channel):
    return _rp_py.rp_GenGetAmp(channel)

def rp_GenOffset(channel, offset):
    return _rp_py.rp_GenOffset(channel, offset)

def rp_GenGetOffset(channel):
    return _rp_py.rp_GenGetOffset(channel)

def rp_GenFreq(channel, frequency):
    return _rp_py.rp_GenFreq(channel, frequency)

def rp_GenFreqDirect(channel, frequency):
    return _rp_py.rp_GenFreqDirect(channel, frequency)

def rp_GenGetFreq(channel):
    return _rp_py.rp_GenGetFreq(channel)

def rp_GenSweepStartFreq(channel, frequency):
    return _rp_py.rp_GenSweepStartFreq(channel, frequency)

def rp_GenGetSweepStartFreq(channel):
    return _rp_py.rp_GenGetSweepStartFreq(channel)

def rp_GenSweepEndFreq(channel, frequency):
    return _rp_py.rp_GenSweepEndFreq(channel, frequency)

def rp_GenGetSweepEndFreq(channel):
    return _rp_py.rp_GenGetSweepEndFreq(channel)

def rp_GenPhase(channel, phase):
    return _rp_py.rp_GenPhase(channel, phase)

def rp_GenGetPhase(channel):
    return _rp_py.rp_GenGetPhase(channel)

def rp_GenWaveform(channel, type):
    return _rp_py.rp_GenWaveform(channel, type)

def rp_GenGetWaveform(channel):
    return _rp_py.rp_GenGetWaveform(channel)

def rp_GenSweepMode(channel, mode):
    return _rp_py.rp_GenSweepMode(channel, mode)

def rp_GenGetSweepMode(channel):
    return _rp_py.rp_GenGetSweepMode(channel)

def rp_GenSweepDir(channel, mode):
    return _rp_py.rp_GenSweepDir(channel, mode)

def rp_GenGetSweepDir(channel):
    return _rp_py.rp_GenGetSweepDir(channel)

def rp_GenArbWaveform(channel, waveform, length):
    return _rp_py.rp_GenArbWaveform(channel, waveform, length)

def rp_GenGetArbWaveform(channel, waveform):
    return _rp_py.rp_GenGetArbWaveform(channel, waveform)

def rp_GenDutyCycle(channel, ratio):
    return _rp_py.rp_GenDutyCycle(channel, ratio)

def rp_GenGetDutyCycle(channel):
    return _rp_py.rp_GenGetDutyCycle(channel)

def rp_GenRiseTime(channel, time):
    return _rp_py.rp_GenRiseTime(channel, time)

def rp_GenGetRiseTime(channel):
    return _rp_py.rp_GenGetRiseTime(channel)

def rp_GenFallTime(channel, time):
    return _rp_py.rp_GenFallTime(channel, time)

def rp_GenGetFallTime(channel):
    return _rp_py.rp_GenGetFallTime(channel)

def rp_GenMode(channel, mode):
    return _rp_py.rp_GenMode(channel, mode)

def rp_GenGetMode(channel):
    return _rp_py.rp_GenGetMode(channel)

def rp_GenBurstCount(channel, num):
    return _rp_py.rp_GenBurstCount(channel, num)

def rp_GenGetBurstCount(channel):
    return _rp_py.rp_GenGetBurstCount(channel)

def rp_GenBurstLastValue(channel, amplitude):
    return _rp_py.rp_GenBurstLastValue(channel, amplitude)

def rp_GenGetBurstLastValue(channel):
    return _rp_py.rp_GenGetBurstLastValue(channel)

def rp_GenSetInitGenValue(channel, amplitude):
    return _rp_py.rp_GenSetInitGenValue(channel, amplitude)

def rp_GenGetInitGenValue(channel):
    return _rp_py.rp_GenGetInitGenValue(channel)

def rp_GenBurstRepetitions(channel, repetitions):
    return _rp_py.rp_GenBurstRepetitions(channel, repetitions)

def rp_GenGetBurstRepetitions(channel):
    return _rp_py.rp_GenGetBurstRepetitions(channel)

def rp_GenBurstPeriod(channel, period):
    return _rp_py.rp_GenBurstPeriod(channel, period)

def rp_GenGetBurstPeriod(channel):
    return _rp_py.rp_GenGetBurstPeriod(channel)

def rp_GenTriggerSource(channel, src):
    return _rp_py.rp_GenTriggerSource(channel, src)

def rp_GenGetTriggerSource(channel):
    return _rp_py.rp_GenGetTriggerSource(channel)

def rp_GenSynchronise():
    return _rp_py.rp_GenSynchronise()

def rp_GenResetTrigger(channel):
    return _rp_py.rp_GenResetTrigger(channel)

def rp_GenTriggerOnly(channel):
    return _rp_py.rp_GenTriggerOnly(channel)

def rp_GenResetChannelSM(channel):
    return _rp_py.rp_GenResetChannelSM(channel)

def rp_SetEnableTempProtection(channel, enable):
    return _rp_py.rp_SetEnableTempProtection(channel, enable)

def rp_GetEnableTempProtection(channel):
    return _rp_py.rp_GetEnableTempProtection(channel)

def rp_SetLatchTempAlarm(channel, status):
    return _rp_py.rp_SetLatchTempAlarm(channel, status)

def rp_GetLatchTempAlarm(channel):
    return _rp_py.rp_GetLatchTempAlarm(channel)

def rp_GetRuntimeTempAlarm(channel):
    return _rp_py.rp_GetRuntimeTempAlarm(channel)

def rp_GenSetGainOut(channel, mode):
    return _rp_py.rp_GenSetGainOut(channel, mode)

def rp_GenGetGainOut(channel):
    return _rp_py.rp_GenGetGainOut(channel)

def rp_GenSetExtTriggerDebouncerUs(value):
    return _rp_py.rp_GenSetExtTriggerDebouncerUs(value)

def rp_GenGetExtTriggerDebouncerUs():
    return _rp_py.rp_GenGetExtTriggerDebouncerUs()

def rp_AcqSetArmKeep(enable):
    return _rp_py.rp_AcqSetArmKeep(enable)

def rp_AcqGetArmKeep():
    return _rp_py.rp_AcqGetArmKeep()

def rp_AcqGetBufferFillState():
    return _rp_py.rp_AcqGetBufferFillState()

def rp_AcqSetDecimation(decimation):
    return _rp_py.rp_AcqSetDecimation(decimation)

def rp_AcqGetDecimation():
    return _rp_py.rp_AcqGetDecimation()

def rp_AcqConvertFactorToDecimation(factor):
    return _rp_py.rp_AcqConvertFactorToDecimation(factor)

def rp_AcqSetDecimationFactor(decimation):
    return _rp_py.rp_AcqSetDecimationFactor(decimation)

def rp_AcqGetDecimationFactor():
    return _rp_py.rp_AcqGetDecimationFactor()

def rp_AcqGetSamplingRateHz():
    return _rp_py.rp_AcqGetSamplingRateHz()

def rp_AcqSetAveraging(enable):
    return _rp_py.rp_AcqSetAveraging(enable)

def rp_AcqGetAveraging():
    return _rp_py.rp_AcqGetAveraging()

def rp_AcqSetTriggerSrc(source):
    return _rp_py.rp_AcqSetTriggerSrc(source)

def rp_AcqGetTriggerSrc():
    return _rp_py.rp_AcqGetTriggerSrc()

def rp_AcqGetTriggerState():
    return _rp_py.rp_AcqGetTriggerState()

def rp_AcqSetTriggerDelay(decimated_data_num):
    return _rp_py.rp_AcqSetTriggerDelay(decimated_data_num)

def rp_AcqGetTriggerDelay():
    return _rp_py.rp_AcqGetTriggerDelay()

def rp_AcqSetTriggerDelayDirect(decimated_data_num):
    return _rp_py.rp_AcqSetTriggerDelayDirect(decimated_data_num)

def rp_AcqGetTriggerDelayDirect():
    return _rp_py.rp_AcqGetTriggerDelayDirect()

def rp_AcqSetTriggerDelayNs(time_ns):
    return _rp_py.rp_AcqSetTriggerDelayNs(time_ns)

def rp_AcqGetTriggerDelayNs():
    return _rp_py.rp_AcqGetTriggerDelayNs()

def rp_AcqSetTriggerDelayNsDirect(time_ns):
    return _rp_py.rp_AcqSetTriggerDelayNsDirect(time_ns)

def rp_AcqGetTriggerDelayNsDirect():
    return _rp_py.rp_AcqGetTriggerDelayNsDirect()

def rp_AcqGetPreTriggerCounter():
    return _rp_py.rp_AcqGetPreTriggerCounter()

def rp_AcqSetTriggerLevel(channel, voltage):
    return _rp_py.rp_AcqSetTriggerLevel(channel, voltage)

def rp_AcqGetTriggerLevel(channel):
    return _rp_py.rp_AcqGetTriggerLevel(channel)

def rp_AcqSetTriggerHyst(voltage):
    return _rp_py.rp_AcqSetTriggerHyst(voltage)

def rp_AcqGetTriggerHyst():
    return _rp_py.rp_AcqGetTriggerHyst()

def rp_AcqSetGain(channel, state):
    return _rp_py.rp_AcqSetGain(channel, state)

def rp_AcqGetGain(channel):
    return _rp_py.rp_AcqGetGain(channel)

def rp_AcqGetGainV(channel):
    return _rp_py.rp_AcqGetGainV(channel)

def rp_AcqGetWritePointer():
    return _rp_py.rp_AcqGetWritePointer()

def rp_AcqGetWritePointerAtTrig():
    return _rp_py.rp_AcqGetWritePointerAtTrig()

def rp_AcqStart():
    return _rp_py.rp_AcqStart()

def rp_AcqStop():
    return _rp_py.rp_AcqStop()

def rp_AcqReset():
    return _rp_py.rp_AcqReset()

def rp_AcqResetFpga():
    return _rp_py.rp_AcqResetFpga()

def rp_AcqUnlockTrigger():
    return _rp_py.rp_AcqUnlockTrigger()

def rp_AcqGetUnlockTrigger():
    return _rp_py.rp_AcqGetUnlockTrigger()

def rp_AcqGetNormalizedDataPos(pos):
    return _rp_py.rp_AcqGetNormalizedDataPos(pos)

def rp_AcqGetDataPosRaw(channel, start_pos, end_pos, buffer, buffer_size):
    return _rp_py.rp_AcqGetDataPosRaw(channel, start_pos, end_pos, buffer, buffer_size)

def rp_AcqGetDataPosV(channel, start_pos, end_pos, buffer, buffer_size):
    return _rp_py.rp_AcqGetDataPosV(channel, start_pos, end_pos, buffer, buffer_size)

def rp_AcqGetDataRaw(channel, pos, size, buffer):
    return _rp_py.rp_AcqGetDataRaw(channel, pos, size, buffer)

def rp_AcqGetDataRawWithCalib(channel, pos, size, buffer):
    return _rp_py.rp_AcqGetDataRawWithCalib(channel, pos, size, buffer)

def rp_AcqGetOldestDataRaw(channel, size, buffer):
    return _rp_py.rp_AcqGetOldestDataRaw(channel, size, buffer)

def rp_AcqGetLatestDataRaw(channel, size, buffer):
    return _rp_py.rp_AcqGetLatestDataRaw(channel, size, buffer)

def rp_AcqGetDataV(channel, pos, size, buffer):
    return _rp_py.rp_AcqGetDataV(channel, pos, size, buffer)

def rp_AcqGetData(pos, out):
    return _rp_py.rp_AcqGetData(pos, out)

def rp_AcqGetOldestDataV(channel, size, buffer):
    return _rp_py.rp_AcqGetOldestDataV(channel, size, buffer)

def rp_AcqGetLatestDataV(channel, size, buffer):
    return _rp_py.rp_AcqGetLatestDataV(channel, size, buffer)

def rp_AcqGetBufSize(size):
    return _rp_py.rp_AcqGetBufSize(size)

def rp_AcqUpdateAcqFilter(channel):
    return _rp_py.rp_AcqUpdateAcqFilter(channel)

def rp_AcqGetFilterCalibValue(channel):
    return _rp_py.rp_AcqGetFilterCalibValue(channel)

def rp_AcqSetExtTriggerDebouncerUs(value):
    return _rp_py.rp_AcqSetExtTriggerDebouncerUs(value)

def rp_AcqGetExtTriggerDebouncerUs():
    return _rp_py.rp_AcqGetExtTriggerDebouncerUs()

def rp_AcqSetAC_DC(channel, mode):
    return _rp_py.rp_AcqSetAC_DC(channel, mode)

def rp_AcqGetAC_DC(channel):
    return _rp_py.rp_AcqGetAC_DC(channel)

def rp_createBuffer(maxChannels, length, initInt16, initDouble, initFloat):
    return _rp_py.rp_createBuffer(maxChannels, length, initInt16, initDouble, initFloat)

def rp_deleteBuffer(_in_buffer):
    return _rp_py.rp_deleteBuffer(_in_buffer)

def rp_AcqAxiGetBufferFillState(channel):
    return _rp_py.rp_AcqAxiGetBufferFillState(channel)

def rp_AcqAxiSetDecimationFactor(decimation):
    return _rp_py.rp_AcqAxiSetDecimationFactor(decimation)

def rp_AcqAxiGetDecimationFactor():
    return _rp_py.rp_AcqAxiGetDecimationFactor()

def rp_AcqAxiSetTriggerDelay(channel, decimated_data_num):
    return _rp_py.rp_AcqAxiSetTriggerDelay(channel, decimated_data_num)

def rp_AcqAxiGetTriggerDelay(channel):
    return _rp_py.rp_AcqAxiGetTriggerDelay(channel)

def rp_AcqAxiGetWritePointer(channel):
    return _rp_py.rp_AcqAxiGetWritePointer(channel)

def rp_AcqAxiGetWritePointerAtTrig(channel):
    return _rp_py.rp_AcqAxiGetWritePointerAtTrig(channel)

def rp_AcqAxiGetMemoryRegion():
    return _rp_py.rp_AcqAxiGetMemoryRegion()

def rp_AcqAxiEnable(channel, enable):
    return _rp_py.rp_AcqAxiEnable(channel, enable)

def rp_AcqAxiGetDataRaw(channel, pos, size, buffer):
    return _rp_py.rp_AcqAxiGetDataRaw(channel, pos, size, buffer)

def rp_AcqAxiGetDataV(channel, pos, size, buffer):
    return _rp_py.rp_AcqAxiGetDataV(channel, pos, size, buffer)

def rp_AcqAxiSetBufferSamples(channel, address, samples):
    return _rp_py.rp_AcqAxiSetBufferSamples(channel, address, samples)

def rp_AcqAxiSetBufferBytes(channel, address, size):
    return _rp_py.rp_AcqAxiSetBufferBytes(channel, address, size)


